
For every change that you want to make to your database schema (like creating a table, adding a column,
or removing an unused index) you create a pair of migration files. One file is the ‘up’ migration
which contains the SQL statements necessary to implement the change, and the other is a ‘down’
migration which contains the SQL statements to reverse (or roll-back) the change.

Each pair of migration files is numbered sequentially, usually 0001, 0002, 0003... 
or with a Unix timestamp, to indicate the order in w
hich migrations should be applied to a database.

You use some kind of tool or script to execute or rollback the SQL statements in 
the sequential migration files against your database. The tool keeps track of which 
migrations have already been applied, so that only the necessary SQL statements are actually executed.


Using migrations to manage your database schema, 
rather than manually executing the SQL statements yourself, 
has a few benefits:

The database schema (along with its evolution and changes) is completely 
described by the ‘up’ and ‘down’ SQL migration files. And because 
these are just regular files containing some SQL statements, 
they can be included and tracked alongside the rest of your code in a version control system.

It’s possible to replicate the current database schema precisely on 
another machine by running the necessary ‘up’ migrations. This is a 
big help when you need to manage and synchronize database schemas in 
different environments (development, testing, production, etc.).

It’s possible to roll-back database schema changes if 
necessary by applying the appropriate ‘down’ migrations.


Installing the migrate tool

$  curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz
$  mv migrate.linux-amd64 $GOPATH/bin/migrate

The first thing we need to do is generate a pair of migration files using the migrate create command. 
run the following command in your terminal:

$ migrate create -seq -ext=.sql -dir=./migrations create_user_table


In this command:

The -seq flag indicates that we want to use sequential numbering like 0001, 0002, 
... for the migration files (instead of a Unix timestamp, which is the default).

The -ext flag indicates that we want to give the migration files the extension .sql.

The -dir flag indicates that we want to store the migration files in 
the ./migrations directory (which will be created automatically if it 
doesn’t already exist).

The name create_movies_table is a descriptive label that we give
the migration files to signify their contents.

Executing the migrations

$  migrate -path=./migrations -database=postgres://test:islamghany@localhost/test up
